// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	zms "github.com/AthenZ/athenz/clients/go/zms"
	gomock "github.com/golang/mock/gomock"
)

// MockZmsClient is a mock of ZmsClient interface.
type MockZmsClient struct {
	ctrl     *gomock.Controller
	recorder *MockZmsClientMockRecorder
}

// MockZmsClientMockRecorder is the mock recorder for MockZmsClient.
type MockZmsClientMockRecorder struct {
	mock *MockZmsClient
}

// NewMockZmsClient creates a new mock instance.
func NewMockZmsClient(ctrl *gomock.Controller) *MockZmsClient {
	mock := &MockZmsClient{ctrl: ctrl}
	mock.recorder = &MockZmsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZmsClient) EXPECT() *MockZmsClientMockRecorder {
	return m.recorder
}

// DeleteSubDomain mocks base method.
func (m *MockZmsClient) DeleteSubDomain(parentDomain, subDomainName, auditRef string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubDomain", parentDomain, subDomainName, auditRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubDomain indicates an expected call of DeleteSubDomain.
func (mr *MockZmsClientMockRecorder) DeleteSubDomain(parentDomain, subDomainName, auditRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubDomain", reflect.TypeOf((*MockZmsClient)(nil).DeleteSubDomain), parentDomain, subDomainName, auditRef)
}

// GetDomain mocks base method.
func (m *MockZmsClient) GetDomain(domainName string) (*zms.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", domainName)
	ret0, _ := ret[0].(*zms.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockZmsClientMockRecorder) GetDomain(domainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockZmsClient)(nil).GetDomain), domainName)
}

// GetRole mocks base method.
func (m *MockZmsClient) GetRole(domain, roleName string) (*zms.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", domain, roleName)
	ret0, _ := ret[0].(*zms.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockZmsClientMockRecorder) GetRole(domain, roleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockZmsClient)(nil).GetRole), domain, roleName)
}

// PostSubDomain mocks base method.
func (m *MockZmsClient) PostSubDomain(parentDomain, auditRef string, detail *zms.SubDomain) (*zms.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostSubDomain", parentDomain, auditRef, detail)
	ret0, _ := ret[0].(*zms.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostSubDomain indicates an expected call of PostSubDomain.
func (mr *MockZmsClientMockRecorder) PostSubDomain(parentDomain, auditRef, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostSubDomain", reflect.TypeOf((*MockZmsClient)(nil).PostSubDomain), parentDomain, auditRef, detail)
}
